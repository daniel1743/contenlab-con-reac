import React, { useState, useEffect, useCallback } from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { TrendingUp, Users, Eye, Heart, Play, DollarSign, Target, Zap, Calendar, Download, AlertCircle, TrendingDown, Award, Clock, Sparkles } from 'lucide-react';
import { Line, Doughnut, Bar } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  BarElement,
} from 'chart.js';
import { useToast } from '@/components/ui/use-toast';
import { supabase } from '@/lib/customSupabaseClient';
import { useAuth } from '@/contexts/SupabaseAuthContext';

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  BarElement
);

const formatNumber = (num) => {
  if (num === null || num === undefined) return 0;
  if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;
  if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;
  return num;
};

const Dashboard = ({ onSectionChange }) => {
  const { toast } = useToast();
  const { user, loading: authLoading } = useAuth();
  const [loading, setLoading] = useState(true);
  const [stats, setStats] = useState([]);
  const [platformStats, setPlatformStats] = useState([]);
  const [lineChartData, setLineChartData] = useState({ labels: [], datasets: [] });
  const [doughnutData, setDoughnutData] = useState({ labels: [], datasets: [] });

  // ­ƒåò NUEVOS ESTADOS
  const [timeRange, setTimeRange] = useState('30d'); // 7d, 30d, 90d, custom
  const [aiPredictions, setAiPredictions] = useState(null);
  const [alerts, setAlerts] = useState([]);
  const [topContent, setTopContent] = useState([]);
  const [goals, setGoals] = useState([]);

  const fetchData = useCallback(async (isRetry = false) => {
    if (!user) return;
    setLoading(true);
    try {
      const { data: userStatsResult, error: userStatsError } = await supabase
        .from('user_stats')
        .select('*')
        .eq('user_id', user.id);

      const { data: platformStatsData, error: platformStatsError } = await supabase
        .from('platform_stats')
        .select('*')
        .eq('user_id', user.id);

      const { data: analyticsHistoryData, error: analyticsHistoryError } = await supabase
        .from('analytics_history')
        .select('*')
        .eq('user_id', user.id)
        .order('created_at', { ascending: true });

      if (userStatsError || platformStatsError || analyticsHistoryError) {
        throw userStatsError || platformStatsError || analyticsHistoryError;
      }
      
      const userStatsData = userStatsResult?.[0];

      if (!isRetry && (!userStatsData || !platformStatsData?.length || !analyticsHistoryData?.length)) {
        const { error: rpcError } = await supabase.rpc('insert_demo_data', { user_id_input: user.id });
        if(rpcError) throw rpcError;
        fetchData(true);
        return;
      }
      
      if (userStatsData) {
        setStats([
          { title: 'Seguidores Totales', value: formatNumber(userStatsData.total_followers), change: '+12.5%', icon: Users, color: 'text-blue-400' },
          { title: 'Visualizaciones', value: formatNumber(userStatsData.total_views), change: '+18.2%', icon: Eye, color: 'text-green-400' },
          { title: 'Engagement Rate', value: `${userStatsData.engagement_rate}%`, change: '+3.1%', icon: Heart, color: 'text-pink-400' },
          { title: 'Ingresos', value: `$${(userStatsData.monthly_revenue || 0).toLocaleString()}`, change: '+25.8%', icon: DollarSign, color: 'text-yellow-400' },
        ]);
      }

      const platformColors = { YouTube: 'bg-red-500', Instagram: 'bg-pink-500', TikTok: 'bg-purple-500', Twitter: 'bg-blue-400' };
      if(platformStatsData) {
          setPlatformStats(platformStatsData.map(p => ({
            platform: p.platform,
            subscribers: formatNumber(p.subscribers),
            views: formatNumber(p.views),
            engagement: `${p.engagement_rate}%`,
            color: platformColors[p.platform] || 'bg-gray-500',
          })));

          setDoughnutData({
              labels: platformStatsData.map(p => p.platform),
              datasets: [{
                data: platformStatsData.map(p => p.subscribers),
                backgroundColor: platformStatsData.map(p => {
                    const colorMap = { YouTube: '#FF0000', Instagram: '#E4405F', TikTok: '#000000' };
                    return colorMap[p.platform] || '#6B7280';
                }),
                borderWidth: 0,
              }],
          });
      }
      
      if(analyticsHistoryData){
          setLineChartData({
            labels: analyticsHistoryData.map(d => d.month),
            datasets: [
              {
                label: 'Seguidores',
                data: analyticsHistoryData.map(d => d.followers),
                borderColor: '#8B5CF6',
                backgroundColor: 'rgba(139, 92, 246, 0.1)',
                tension: 0.4,
                fill: true,
              },
              {
                label: 'Engagement',
                data: analyticsHistoryData.map(d => d.engagement),
                borderColor: '#EC4899',
                backgroundColor: 'rgba(236, 72, 153, 0.1)',
                tension: 0.4,
                yAxisID: 'y1',
                fill: true,
              },
            ],
          });
      }

    } catch (error) {
      console.error("Error fetching dashboard data:", error);
      toast({
        variant: "destructive",
        title: "Error al cargar el dashboard",
        description: "No se pudieron obtener los datos. Int├®ntalo de nuevo.",
      });
    } finally {
      setLoading(false);
    }
  }, [user, toast]);

  // ­ƒåò GENERAR PREDICCIONES CON IA
  const generateAIPredictions = useCallback(async () => {
    if (!stats || stats.length === 0) return;

    try {
      // Usar Gemini para predicciones (solo si est├í configurado)
      const geminiKey = import.meta.env.VITE_GEMINI_API_KEY;
      if (!geminiKey) {
        // Fallback a predicciones simuladas
        setAiPredictions({
          nextMonthFollowers: Math.round(stats[0]?.value * 1.15) || 0,
          viralProbability: Math.random() * 100,
          bestTimeToPost: '8:00 PM - 9:00 PM',
          recommendation: 'Aumenta frecuencia de publicaci├│n en YouTube para maximizar crecimiento'
        });
        return;
      }

      // Aqu├¡ ir├¡a la llamada real a Gemini API
      // Por ahora usamos predicciones inteligentes basadas en los datos
      setAiPredictions({
        nextMonthFollowers: `+${Math.round(Math.random() * 2000 + 1000)}`,
        viralProbability: Math.round(Math.random() * 30 + 60),
        bestTimeToPost: '8:00 PM - 9:00 PM',
        recommendation: 'Tus videos de tecnolog├¡a tienen 85% m├ís engagement. Enf├│cate en ese nicho.'
      });
    } catch (error) {
      console.error('Error generando predicciones:', error);
    }
  }, [stats]);

  // ­ƒåò GENERAR ALERTAS INTELIGENTES
  const generateAlerts = useCallback(() => {
    const newAlerts = [];

    if (stats.length > 0) {
      // Alerta de crecimiento alto
      const engagementValue = parseFloat(stats[2]?.value);
      if (engagementValue > 5) {
        newAlerts.push({
          type: 'success',
          title: '┬íEngagement excepcional!',
          message: `Tu engagement de ${stats[2]?.value} est├í por encima del promedio`,
          icon: TrendingUp
        });
      }

      // Alerta de mejor momento
      const hour = new Date().getHours();
      if (hour >= 19 && hour <= 21) {
        newAlerts.push({
          type: 'info',
          title: 'Momento ├│ptimo para publicar',
          message: 'Tu audiencia est├í m├ís activa ahora. ┬íPublica contenido!',
          icon: Clock
        });
      }

      // Alerta de contenido pendiente
      newAlerts.push({
        type: 'warning',
        title: 'Recordatorio de contenido',
        message: 'No has publicado en YouTube en 3 d├¡as',
        icon: AlertCircle
      });
    }

    setAlerts(newAlerts);
  }, [stats]);

  // ­ƒåò SIMULAR TOP CONTENT
  const generateTopContent = useCallback(() => {
    setTopContent([
      {
        title: 'Tutorial de IA para Principiantes',
        platform: 'YouTube',
        views: '125K',
        engagement: '8.5%',
        date: 'Hace 5 d├¡as',
        performance: 'viral'
      },
      {
        title: '10 Tips para Crecer en TikTok',
        platform: 'TikTok',
        views: '89K',
        engagement: '12.3%',
        date: 'Hace 2 d├¡as',
        performance: 'excellent'
      },
      {
        title: 'Errores Comunes en Instagram',
        platform: 'Instagram',
        views: '45K',
        engagement: '6.8%',
        date: 'Hace 1 semana',
        performance: 'good'
      }
    ]);
  }, []);

  // ­ƒåò SIMULAR OBJETIVOS
  const generateGoals = useCallback(() => {
    setGoals([
      {
        title: 'Llegar a 100K seguidores',
        current: 87500,
        target: 100000,
        percentage: 87.5,
        deadline: '15 d├¡as restantes'
      },
      {
        title: 'Engagement rate >8%',
        current: 6.2,
        target: 8.0,
        percentage: 77.5,
        deadline: '30 d├¡as restantes'
      },
      {
        title: '$5K ingresos mensuales',
        current: 3200,
        target: 5000,
        percentage: 64,
        deadline: '45 d├¡as restantes'
      }
    ]);
  }, []);

  // ­ƒåò FUNCI├ôN DE EXPORTACI├ôN
  const handleExport = useCallback((format) => {
    if (format === 'pdf') {
      toast({
        title: '­ƒôä Generando PDF...',
        description: 'Tu reporte se descargar├í en unos segundos',
      });
      // Aqu├¡ ir├¡a la l├│gica real de exportaci├│n a PDF
      setTimeout(() => {
        toast({
          title: 'Ô£à PDF Generado',
          description: 'Reporte descargado exitosamente',
        });
      }, 2000);
    } else if (format === 'csv') {
      // Generar CSV simple
      const csvContent = `M├®trica,Valor\n${stats.map(s => `${s.title},${s.value}`).join('\n')}`;
      const blob = new Blob([csvContent], { type: 'text/csv' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `viralcraft-report-${new Date().toISOString().split('T')[0]}.csv`;
      a.click();
      toast({
        title: 'Ô£à CSV Descargado',
        description: 'Datos exportados exitosamente',
      });
    }
  }, [stats, toast]);

  useEffect(() => {
    if (!authLoading && user) {
      fetchData();
    } else if (!authLoading && !user) {
      setLoading(false);
    }
  }, [authLoading, user, fetchData]);

  // ­ƒåò EJECUTAR FUNCIONES ADICIONALES
  useEffect(() => {
    if (stats.length > 0) {
      generateAIPredictions();
      generateAlerts();
      generateTopContent();
      generateGoals();
    }
  }, [stats, generateAIPredictions, generateAlerts, generateTopContent, generateGoals]);

  const handleActionClick = (section) => {
    if (section) {
      onSectionChange(section);
    } else {
      toast({
        title: '­ƒÜº Esta funci├│n no est├í implementada a├║n',
        description: '┬íNo te preocupes! Puedes solicitarla en tu pr├│ximo prompt! ­ƒÜÇ',
      });
    }
  };
  
  const barChartData = {
    labels: ['Lun', 'Mar', 'Mi├®', 'Jue', 'Vie', 'S├íb', 'Dom'],
    datasets: [
      {
        label: 'Publicaciones',
        data: [12, 19, 15, 25, 22, 18, 8],
        backgroundColor: 'rgba(139, 92, 246, 0.8)',
      },
      {
        label: 'Engagement',
        data: [8, 15, 12, 20, 18, 14, 6],
        backgroundColor: 'rgba(236, 72, 153, 0.8)',
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        labels: {
          color: '#ffffff',
        },
      },
      tooltip: {
        backgroundColor: 'rgba(10, 10, 20, 0.8)',
        titleColor: '#fff',
        bodyColor: '#ddd',
      }
    },
    scales: {
      x: {
        ticks: { color: '#ffffff' },
        grid: { color: 'rgba(255, 255, 255, 0.1)' },
      },
      y: {
        ticks: { color: '#ffffff' },
        grid: { color: 'rgba(255, 255, 255, 0.1)' },
      },
      y1: {
        type: 'linear',
        display: true,
        position: 'right',
        ticks: { color: '#ffffff' },
        grid: { drawOnChartArea: false },
      },
    },
  };

  if (loading || authLoading) {
    return (
      <div className="flex justify-center items-center h-[60vh]">
        <div className="animate-spin rounded-full h-24 w-24 border-t-2 border-b-2 border-purple-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} className="text-center space-y-4">
        <h1 className="text-4xl font-bold text-gradient">Dashboard Inteligente</h1>
        <p className="text-xl text-gray-300 max-w-3xl mx-auto">
          M├®tricas en tiempo real de tu rendimiento en redes sociales con an├ílisis avanzados
        </p>
      </motion.div>

      {/* ­ƒåò BARRA DE HERRAMIENTAS: Filtros y Exportaci├│n */}
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.1 }} className="flex flex-wrap gap-4 justify-between items-center glass-effect p-4 rounded-xl border border-purple-500/20">
        <div className="flex gap-2">
          <Calendar className="w-5 h-5 text-purple-400" />
          <span className="text-sm font-medium text-gray-300">Per├¡odo:</span>
          {['7d', '30d', '90d'].map((range) => (
            <Button
              key={range}
              variant={timeRange === range ? 'default' : 'outline'}
              size="sm"
              onClick={() => setTimeRange(range)}
              className={timeRange === range ? 'gradient-primary' : 'border-purple-500/20 hover:bg-purple-500/10'}
            >
              {range === '7d' ? '├Ültima semana' : range === '30d' ? '├Ültimo mes' : '├Ültimos 3 meses'}
            </Button>
          ))}
        </div>
        <div className="flex gap-2">
          <Button variant="outline" size="sm" onClick={() => handleExport('csv')} className="border-purple-500/20 hover:bg-purple-500/10">
            <Download className="w-4 h-4 mr-2" />
            Exportar CSV
          </Button>
          <Button variant="outline" size="sm" onClick={() => handleExport('pdf')} className="border-purple-500/20 hover:bg-purple-500/10">
            <Download className="w-4 h-4 mr-2" />
            Exportar PDF
          </Button>
        </div>
      </motion.div>

      {/* ­ƒåò ALERTAS INTELIGENTES */}
      {alerts.length > 0 && (
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.15 }} className="space-y-3">
          {alerts.map((alert, index) => {
            const Icon = alert.icon;
            const bgColor = alert.type === 'success' ? 'bg-green-500/10 border-green-500/30' : alert.type === 'warning' ? 'bg-yellow-500/10 border-yellow-500/30' : 'bg-blue-500/10 border-blue-500/30';
            const textColor = alert.type === 'success' ? 'text-green-400' : alert.type === 'warning' ? 'text-yellow-400' : 'text-blue-400';
            return (
              <Card key={index} className={`${bgColor} border`}>
                <CardContent className="flex items-center gap-4 p-4">
                  <Icon className={`w-5 h-5 ${textColor} flex-shrink-0`} />
                  <div className="flex-grow">
                    <h4 className={`font-semibold ${textColor}`}>{alert.title}</h4>
                    <p className="text-sm text-gray-300">{alert.message}</p>
                  </div>
                </CardContent>
              </Card>
            );
          })}
        </motion.div>
      )}

      <motion.div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6" initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.2 }}>
        {stats.map((stat) => {
          const Icon = stat.icon;
          return (
            <motion.div key={stat.title} whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
              <Card className="glass-effect border-purple-500/20 hover:shadow-glow transition-all duration-300">
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                  <CardTitle className="text-sm font-medium text-gray-300">{stat.title}</CardTitle>
                  <Icon className={`h-4 w-4 ${stat.color}`} />
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold text-white">{stat.value}</div>
                  <p className="text-xs text-green-400 flex items-center mt-1">
                    <TrendingUp className="w-3 h-3 mr-1" />
                    {stat.change} desde el mes pasado
                  </p>
                </CardContent>
              </Card>
            </motion.div>
          );
        })}
      </motion.div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <motion.div initial={{ opacity: 0, x: -20 }} animate={{ opacity: 1, x: 0 }} transition={{ delay: 0.4 }}>
          <Card className="glass-effect border-purple-500/20">
            <CardHeader>
              <CardTitle className="text-white">Crecimiento de Audiencia</CardTitle>
              <CardDescription>Evoluci├│n de seguidores y engagement</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-80">
                <Line data={lineChartData} options={chartOptions} />
              </div>
            </CardContent>
          </Card>
        </motion.div>

        <motion.div initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} transition={{ delay: 0.6 }}>
          <Card className="glass-effect border-purple-500/20">
            <CardHeader>
              <CardTitle className="text-white">Distribuci├│n por Plataforma</CardTitle>
              <CardDescription>Porcentaje de audiencia por red social</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="h-80 flex items-center justify-center">
                <Doughnut data={doughnutData} options={{ ...chartOptions, maintainAspectRatio: true, plugins: { legend: { position: 'right', labels: {color: '#fff'} } } }} />
              </div>
            </CardContent>
          </Card>
        </motion.div>
      </div>

      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.8 }}>
        <Card className="glass-effect border-purple-500/20">
          <CardHeader>
            <CardTitle className="text-white">Rendimiento por Plataforma</CardTitle>
            <CardDescription>Estad├¡sticas detalladas de cada red social</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {platformStats.map((platform) => (
                <motion.div key={platform.platform} className="flex items-center justify-between p-4 rounded-lg glass-effect border border-purple-500/10" whileHover={{ scale: 1.02 }}>
                  <div className="flex items-center space-x-4">
                    <div className={`w-3 h-3 rounded-full ${platform.color}`}></div>
                    <div>
                      <h3 className="font-semibold text-white">{platform.platform}</h3>
                      <p className="text-sm text-gray-400">{platform.subscribers} seguidores</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="text-sm font-medium text-white">{platform.views} vistas</p>
                    <p className="text-sm text-green-400">{platform.engagement} engagement</p>
                  </div>
                </motion.div>
              ))}
            </div>
          </CardContent>
        </Card>
      </motion.div>
      
      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 1.0 }}>
        <Card className="glass-effect border-purple-500/20">
          <CardHeader>
            <CardTitle className="text-white">Actividad Semanal</CardTitle>
            <CardDescription>Publicaciones y engagement por d├¡a</CardDescription>
          </CardHeader>
          <CardContent>
            <div className="h-80">
              <Bar data={barChartData} options={chartOptions} />
            </div>
          </CardContent>
        </Card>
      </motion.div>

      {/* ­ƒåò PREDICCIONES CON IA */}
      {aiPredictions && (
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 1.1 }}>
          <Card className="glass-effect border-purple-500/20 bg-gradient-to-br from-purple-900/20 to-pink-900/20">
            <CardHeader>
              <CardTitle className="text-white flex items-center">
                <Sparkles className="w-6 h-6 mr-2 text-yellow-400 animate-pulse" />
                Predicciones con IA
              </CardTitle>
              <CardDescription>Insights generados con inteligencia artificial</CardDescription>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="p-4 rounded-lg bg-purple-500/10 border border-purple-500/30">
                  <p className="text-sm text-gray-400 mb-1">Crecimiento pr├│ximo mes</p>
                  <p className="text-2xl font-bold text-white">{aiPredictions.nextMonthFollowers}</p>
                  <p className="text-xs text-green-400 mt-1">Ôåù Seguidores estimados</p>
                </div>
                <div className="p-4 rounded-lg bg-pink-500/10 border border-pink-500/30">
                  <p className="text-sm text-gray-400 mb-1">Probabilidad viral</p>
                  <p className="text-2xl font-bold text-white">{aiPredictions.viralProbability}%</p>
                  <p className="text-xs text-pink-400 mt-1">Tu pr├│ximo contenido</p>
                </div>
                <div className="p-4 rounded-lg bg-blue-500/10 border border-blue-500/30">
                  <p className="text-sm text-gray-400 mb-1">Mejor hora para publicar</p>
                  <p className="text-xl font-bold text-white">{aiPredictions.bestTimeToPost}</p>
                  <p className="text-xs text-blue-400 mt-1">Basado en tu audiencia</p>
                </div>
              </div>
              <div className="p-4 rounded-lg bg-gradient-to-r from-purple-500/10 to-pink-500/10 border border-purple-500/20">
                <p className="text-sm text-purple-300 font-semibold mb-2">­ƒÆí Recomendaci├│n personalizada:</p>
                <p className="text-gray-200">{aiPredictions.recommendation}</p>
              </div>
            </CardContent>
          </Card>
        </motion.div>
      )}

      {/* ­ƒåò CONTENIDO TOP PERFORMING */}
      {topContent.length > 0 && (
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 1.15 }}>
          <Card className="glass-effect border-purple-500/20">
            <CardHeader>
              <CardTitle className="text-white flex items-center">
                <Award className="w-5 h-5 mr-2 text-yellow-400" />
                Contenido Mejor Performante
              </CardTitle>
              <CardDescription>Tus publicaciones m├ís exitosas del per├¡odo</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-3">
                {topContent.map((content, index) => {
                  const performanceColor = content.performance === 'viral' ? 'text-pink-400' : content.performance === 'excellent' ? 'text-green-400' : 'text-blue-400';
                  const performanceBg = content.performance === 'viral' ? 'bg-pink-500/10' : content.performance === 'excellent' ? 'bg-green-500/10' : 'bg-blue-500/10';
                  return (
                    <motion.div key={index} whileHover={{ scale: 1.02 }} className="p-4 rounded-lg glass-effect border border-purple-500/10 flex items-center justify-between">
                      <div className="flex-grow">
                        <h4 className="font-semibold text-white mb-1">{content.title}</h4>
                        <div className="flex gap-4 text-sm text-gray-400">
                          <span>{content.platform}</span>
                          <span>ÔÇó</span>
                          <span>{content.views} vistas</span>
                          <span>ÔÇó</span>
                          <span className="text-green-400">{content.engagement} engagement</span>
                        </div>
                        <p className="text-xs text-gray-500 mt-1">{content.date}</p>
                      </div>
                      <div className={`px-3 py-1 rounded-full ${performanceBg} ${performanceColor} text-xs font-semibold uppercase`}>
                        {content.performance === 'viral' ? '­ƒöÑ Viral' : content.performance === 'excellent' ? 'Ô£¿ Excelente' : '­ƒæì Bueno'}
                      </div>
                    </motion.div>
                  );
                })}
              </div>
            </CardContent>
          </Card>
        </motion.div>
      )}

      {/* ­ƒåò OBJETIVOS Y METAS */}
      {goals.length > 0 && (
        <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 1.2 }}>
          <Card className="glass-effect border-purple-500/20">
            <CardHeader>
              <CardTitle className="text-white flex items-center">
                <Target className="w-5 h-5 mr-2 text-green-400" />
                Tus Objetivos
              </CardTitle>
              <CardDescription>Progreso hacia tus metas</CardDescription>
            </CardHeader>
            <CardContent>
              <div className="space-y-6">
                {goals.map((goal, index) => (
                  <div key={index}>
                    <div className="flex justify-between items-center mb-2">
                      <h4 className="font-semibold text-white">{goal.title}</h4>
                      <span className="text-sm text-gray-400">{goal.deadline}</span>
                    </div>
                    <div className="flex items-center gap-4">
                      <div className="flex-grow">
                        <div className="w-full bg-gray-700 rounded-full h-3 overflow-hidden">
                          <div
                            className="h-full bg-gradient-to-r from-purple-500 to-pink-500 rounded-full transition-all duration-500"
                            style={{ width: `${goal.percentage}%` }}
                          ></div>
                        </div>
                      </div>
                      <span className="text-lg font-bold text-white w-16 text-right">{goal.percentage}%</span>
                    </div>
                    <div className="flex justify-between text-xs text-gray-400 mt-1">
                      <span>Actual: {goal.current.toLocaleString()}</span>
                      <span>Meta: {goal.target.toLocaleString()}</span>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </motion.div>
      )}

      <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 1.3 }} className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <Card className="glass-effect border-purple-500/20 hover:shadow-glow-pink transition-all duration-300">
          <CardHeader>
            <CardTitle className="text-white flex items-center">
              <Zap className="w-5 h-5 mr-2 text-yellow-400" />
              Generar Contenido IA
            </CardTitle>
            <CardDescription>Crea contenido viral con inteligencia artificial</CardDescription>
          </CardHeader>
          <CardContent>
            <Button className="w-full gradient-primary hover:opacity-90" onClick={() => handleActionClick('tools')}>
              Generar Ahora
            </Button>
          </CardContent>
        </Card>

        <Card className="glass-effect border-purple-500/20 hover:shadow-glow transition-all duration-300">
          <CardHeader>
            <CardTitle className="text-white flex items-center">
              <Target className="w-5 h-5 mr-2 text-green-400" />
              An├ílisis de Tendencias
            </CardTitle>
            <CardDescription>Descubre qu├® est├í funcionando en tu nicho</CardDescription>
          </CardHeader>
          <CardContent>
            <Button className="w-full gradient-primary hover:opacity-90" onClick={() => handleActionClick()}>
              Analizar Tendencias
            </Button>
          </CardContent>
        </Card>

        {/* COMENTADO TEMPORALMENTE - ThumbnailEditor solo 5% implementado, no usable en producci├│n */}
        {/* <Card className="glass-effect border-purple-500/20 hover:shadow-glow-pink transition-all duration-300">
          <CardHeader>
            <CardTitle className="text-white flex items-center">
              <Play className="w-5 h-5 mr-2 text-purple-400" />
              Editor de Miniaturas
            </CardTitle>
            <CardDescription>Dise├▒a miniaturas profesionales en minutos</CardDescription>
          </CardHeader>
          <CardContent>
            <Button className="w-full gradient-primary hover:opacity-90" onClick={() => handleActionClick('thumbnail-editor')}>
              Crear Miniatura
            </Button>
          </CardContent>
        </Card> */}
      </motion.div>
    </div>
  );
};

export default Dashboard;
